// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2018 14:11:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fifo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fifo_vlg_sample_tst(
	rclk,
	rinc,
	rst_n,
	wclk,
	wdata,
	winc,
	sampler_tx
);
input  rclk;
input  rinc;
input  rst_n;
input  wclk;
input [7:0] wdata;
input  winc;
output sampler_tx;

reg sample;
time current_time;
always @(rclk or rinc or rst_n or wclk or wdata or winc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fifo_vlg_check_tst (
	empty,
	full,
	rdata,
	sampler_rx
);
input  empty;
input  full;
input [7:0] rdata;
input sampler_rx;

reg  empty_expected;
reg  full_expected;
reg [7:0] rdata_expected;

reg  empty_prev;
reg  full_prev;
reg [7:0] rdata_prev;

reg  empty_expected_prev;
reg  full_expected_prev;
reg [7:0] rdata_expected_prev;

reg  last_empty_exp;
reg  last_full_exp;
reg [7:0] last_rdata_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	empty_prev = empty;
	full_prev = full;
	rdata_prev = rdata;
end

// update expected /o prevs

always @(trigger)
begin
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	rdata_expected_prev = rdata_expected;
end



// expected empty
initial
begin
	empty_expected = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 
// expected rdata[ 7 ]
initial
begin
	rdata_expected[7] = 1'bX;
	rdata_expected[7] = #999000 1'b0;
end 
// expected rdata[ 6 ]
initial
begin
	rdata_expected[6] = 1'bX;
	rdata_expected[6] = #999000 1'b0;
end 
// expected rdata[ 5 ]
initial
begin
	rdata_expected[5] = 1'bX;
	rdata_expected[5] = #999000 1'b0;
end 
// expected rdata[ 4 ]
initial
begin
	rdata_expected[4] = 1'bX;
	rdata_expected[4] = #999000 1'b0;
end 
// expected rdata[ 3 ]
initial
begin
	rdata_expected[3] = 1'bX;
	rdata_expected[3] = #999000 1'b0;
end 
// expected rdata[ 2 ]
initial
begin
	rdata_expected[2] = 1'bX;
	rdata_expected[2] = #999000 1'b0;
end 
// expected rdata[ 1 ]
initial
begin
	rdata_expected[1] = 1'bX;
	rdata_expected[1] = #999000 1'b0;
end 
// expected rdata[ 0 ]
initial
begin
	rdata_expected[0] = 1'bX;
	rdata_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(empty_expected or empty or full_expected or full or rdata_expected or rdata)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected empty = %b | expected full = %b | expected rdata = %b | ",empty_expected_prev,full_expected_prev,rdata_expected_prev);
	$display("| real empty = %b | real full = %b | real rdata = %b | ",empty_prev,full_prev,rdata_prev);
`endif
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( rdata_expected_prev[0] !== 1'bx ) && ( rdata_prev[0] !== rdata_expected_prev[0] )
		&& ((rdata_expected_prev[0] !== last_rdata_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[0] = rdata_expected_prev[0];
	end
	if (
		( rdata_expected_prev[1] !== 1'bx ) && ( rdata_prev[1] !== rdata_expected_prev[1] )
		&& ((rdata_expected_prev[1] !== last_rdata_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[1] = rdata_expected_prev[1];
	end
	if (
		( rdata_expected_prev[2] !== 1'bx ) && ( rdata_prev[2] !== rdata_expected_prev[2] )
		&& ((rdata_expected_prev[2] !== last_rdata_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[2] = rdata_expected_prev[2];
	end
	if (
		( rdata_expected_prev[3] !== 1'bx ) && ( rdata_prev[3] !== rdata_expected_prev[3] )
		&& ((rdata_expected_prev[3] !== last_rdata_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[3] = rdata_expected_prev[3];
	end
	if (
		( rdata_expected_prev[4] !== 1'bx ) && ( rdata_prev[4] !== rdata_expected_prev[4] )
		&& ((rdata_expected_prev[4] !== last_rdata_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[4] = rdata_expected_prev[4];
	end
	if (
		( rdata_expected_prev[5] !== 1'bx ) && ( rdata_prev[5] !== rdata_expected_prev[5] )
		&& ((rdata_expected_prev[5] !== last_rdata_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[5] = rdata_expected_prev[5];
	end
	if (
		( rdata_expected_prev[6] !== 1'bx ) && ( rdata_prev[6] !== rdata_expected_prev[6] )
		&& ((rdata_expected_prev[6] !== last_rdata_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[6] = rdata_expected_prev[6];
	end
	if (
		( rdata_expected_prev[7] !== 1'bx ) && ( rdata_prev[7] !== rdata_expected_prev[7] )
		&& ((rdata_expected_prev[7] !== last_rdata_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_rdata_exp[7] = rdata_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fifo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg rclk;
reg rinc;
reg rst_n;
reg wclk;
reg [7:0] wdata;
reg winc;
// wires                                               
wire empty;
wire full;
wire [7:0] rdata;

wire sampler;                             

// assign statements (if any)                          
fifo i1 (
// port map - connection between master ports and signals/registers   
	.empty(empty),
	.full(full),
	.rclk(rclk),
	.rdata(rdata),
	.rinc(rinc),
	.rst_n(rst_n),
	.wclk(wclk),
	.wdata(wdata),
	.winc(winc)
);

// rclk
always
begin
	rclk = 1'b0;
	rclk = #10000 1'b1;
	#10000;
end 

// rinc
initial
begin
	rinc = 1'b0;
	rinc = #1600000 1'b1;
	rinc = #320000 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #40000 1'b1;
	rst_n = #4840000 1'b0;
end 

// wclk
always
begin
	wclk = 1'b0;
	wclk = #10000 1'b1;
	#10000;
end 
// wdata[ 7 ]
initial
begin
	wdata[7] = 1'b0;
	wdata[7] = #530000 1'b1;
	wdata[7] = #80000 1'b0;
end 
// wdata[ 6 ]
initial
begin
	wdata[6] = 1'b1;
	wdata[6] = #999000 1'b0;
	wdata[6] = #1561000 1'b1;
	wdata[6] = #160000 1'b0;
	wdata[6] = #1200000 1'b1;
	wdata[6] = #440000 1'b0;
end 
// wdata[ 5 ]
initial
begin
	wdata[5] = 1'b0;
	wdata[5] = #200000 1'b1;
	wdata[5] = #60000 1'b0;
	wdata[5] = #270000 1'b1;
	wdata[5] = #80000 1'b0;
	wdata[5] = #630000 1'b1;
	wdata[5] = #160000 1'b0;
	wdata[5] = #1160000 1'b1;
	wdata[5] = #160000 1'b0;
	wdata[5] = #1200000 1'b1;
	wdata[5] = #440000 1'b0;
end 
// wdata[ 4 ]
initial
begin
	wdata[4] = 1'b0;
	wdata[4] = #200000 1'b1;
	wdata[4] = #60000 1'b0;
	wdata[4] = #980000 1'b1;
	wdata[4] = #160000 1'b0;
	wdata[4] = #600000 1'b1;
	wdata[4] = #160000 1'b0;
	wdata[4] = #720000 1'b1;
	wdata[4] = #160000 1'b0;
	wdata[4] = #400000 1'b1;
	wdata[4] = #160000 1'b0;
	wdata[4] = #320000 1'b1;
	wdata[4] = #440000 1'b0;
	wdata[4] = #320000 1'b1;
	wdata[4] = #160000 1'b0;
end 
// wdata[ 3 ]
initial
begin
	wdata[3] = 1'b1;
	wdata[3] = #840000 1'b0;
	wdata[3] = #50000 1'b1;
	wdata[3] = #109000 1'b0;
	wdata[3] = #241000 1'b1;
	wdata[3] = #160000 1'b0;
	wdata[3] = #600000 1'b1;
	wdata[3] = #160000 1'b0;
	wdata[3] = #720000 1'b1;
	wdata[3] = #160000 1'b0;
	wdata[3] = #240000 1'b1;
	wdata[3] = #320000 1'b0;
	wdata[3] = #320000 1'b1;
	wdata[3] = #440000 1'b0;
	wdata[3] = #320000 1'b1;
	wdata[3] = #160000 1'b0;
end 
// wdata[ 2 ]
initial
begin
	wdata[2] = 1'b0;
	wdata[2] = #200000 1'b1;
	wdata[2] = #60000 1'b0;
	wdata[2] = #1740000 1'b1;
	wdata[2] = #160000 1'b0;
	wdata[2] = #720000 1'b1;
	wdata[2] = #160000 1'b0;
	wdata[2] = #240000 1'b1;
	wdata[2] = #320000 1'b0;
	wdata[2] = #320000 1'b1;
	wdata[2] = #440000 1'b0;
	wdata[2] = #320000 1'b1;
	wdata[2] = #160000 1'b0;
end 
// wdata[ 1 ]
initial
begin
	wdata[1] = 1'b1;
	wdata[1] = #999000 1'b0;
	wdata[1] = #1881000 1'b1;
	wdata[1] = #160000 1'b0;
	wdata[1] = #240000 1'b1;
	wdata[1] = #320000 1'b0;
	wdata[1] = #320000 1'b1;
	wdata[1] = #440000 1'b0;
	wdata[1] = #320000 1'b1;
	wdata[1] = #160000 1'b0;
end 
// wdata[ 0 ]
initial
begin
	wdata[0] = 1'b0;
	wdata[0] = #3440000 1'b1;
	wdata[0] = #160000 1'b0;
	wdata[0] = #1080000 1'b1;
	wdata[0] = #160000 1'b0;
end 

// winc
initial
begin
	winc = 1'b0;
	winc = #120000 1'b1;
	winc = #60000 1'b0;
	winc = #100000 1'b1;
	winc = #60000 1'b0;
	winc = #60000 1'b1;
	winc = #60000 1'b0;
	winc = #60000 1'b1;
	winc = #100000 1'b0;
	winc = #60000 1'b1;
	winc = #140000 1'b0;
	winc = #100000 1'b1;
	winc = #40000 1'b0;
	winc = #280000 1'b1;
	winc = #80000 1'b0;
	winc = #520000 1'b1;
	winc = #160000 1'b0;
	winc = #360000 1'b1;
	winc = #160000 1'b0;
	winc = #440000 1'b1;
	winc = #120000 1'b0;
	winc = #440000 1'b1;
	winc = #120000 1'b0;
	winc = #400000 1'b1;
	winc = #160000 1'b0;
	winc = #320000 1'b1;
	winc = #200000 1'b0;
end 

fifo_vlg_sample_tst tb_sample (
	.rclk(rclk),
	.rinc(rinc),
	.rst_n(rst_n),
	.wclk(wclk),
	.wdata(wdata),
	.winc(winc),
	.sampler_tx(sampler)
);

fifo_vlg_check_tst tb_out(
	.empty(empty),
	.full(full),
	.rdata(rdata),
	.sampler_rx(sampler)
);
endmodule

